@page "/courses/create"
@using BackOffice.Models.GraphQL.Mutations
@inject HttpClient Http
@rendermode InteractiveServer

<PageTitle>Create new course</PageTitle>
<h3>CreateCourse</h3>

<div class="container">
    <div class="create-course">
        <EditForm Model="Input" FormName="create-course" OnValidSubmit="CreateNewCourse" method="post" novalidate class="create-course-form">
            <DataAnnotationsValidator />

            <div class="course-info">
                <div class="create-course-div">
                    <label for="createCourseTitle">Title</label>
                    <InputText @bind-Value="Input.Title" class="form-control" id="createCourseTitle" />
                    <ValidationMessage For="() => Input.Title" />
                </div>

                <div class="create-course-div">
                    <label for="createCourseIngress">Ingress</label>
                    <InputText @bind-Value="Input.Ingress" class="form-control" id="createCourseIngress" />
                    <ValidationMessage For="() => Input.Ingress" />
                </div>

                <div class="create-course-div">
                    <label for="categoryName">Category Name <span class="category-seperation">(if more than one category use , to separate)</span></label>
                    <InputText @bind-Value="CategoryName" class="form-control" id="categoryName" />
                    <ValidationMessage For="() => CategoryName" />
                </div>

                <div class="create-course-div">
                    <label for="createCourseReview">Numbers of Reviews</label>
                    <InputText @bind-Value="Input.Reviews" class="form-control" id="createCourseReview" />
                    <ValidationMessage For="() => Input.Reviews" />
                </div>

                <div class="create-course-div">
                    <label for="createCourseImageUri">ImageUri</label>
                    <InputText @bind-Value="Input.ImageUri" class="form-control" id="createCourseImageUri" />
                    <ValidationMessage For="() => Input.ImageUri" />
                </div>

                <div class="create-course-div">
                    <label for="createCourseImageHeaderUri">ImageHeaderUri</label>
                    <InputText @bind-Value="Input.ImageHeaderUri" class="form-control" id="createCourseImageHeaderUri" />
                    <ValidationMessage For="() => Input.ImageHeaderUri" />
                </div>

                <div class="create-course-div">
                    <label for="createCourseStarRating">StarRating</label>
                    <InputNumber @bind-Value="Input.StarRating" class="form-control" id="createCourseStarRating" />
                    <ValidationMessage For="() => Input.StarRating" />
                </div>

                <div class="create-course-div">
                    <label for="createCourseLikesInNumber">LikesInNumber</label>
                    <InputNumber @bind-Value="Input.LikesInNumber" class="form-control" id="createCourseLikesInNumber" />
                    <ValidationMessage For="() => Input.LikesInNumber" />
                </div>

                <div class="email create-course-div">
                    <label for="createCourseLikesInPercent">LikesInPercent</label>
                    <InputNumber @bind-Value="Input.LikesInPercent" class="form-control" id="createCourseLikesInPercent" />
                    <ValidationMessage For="() => Input.LikesInPercent" />
                </div>

                <div class="create-course-div">
                    <label for="createCourseHoursToComplete">HoursToComplete</label>
                    <InputNumber @bind-Value="Input.HoursToComplete" class="form-control" id="createCourseHoursToComplete" />
                    <ValidationMessage For="() => Input.HoursToComplete" />
                </div>

                <div class="create-course-div">
                    <label for="createCourseIsDigital">Is Digital</label>
                    <InputCheckbox @bind-Value="Input.IsDigital" id="createCourseIsDigital" />
                    <ValidationMessage For="() => Input.IsDigital" />

                    <label for="createCourseIsBestSeller">Is BestSeller</label>
                    <InputCheckbox @bind-Value="Input.IsBestSeller" id="createCourseIsBestSeller" />
                    <ValidationMessage For="() => Input.IsBestSeller" />
                </div>
            </div>

            <h3>Author</h3>
            <div class="author-info">
                <div class="create-course-div">
                    <label for="authorName">Author Name <span class="author-seperation">(if more than one author user , to separate)</span></label>
                    <InputText @bind-Value="AuthorName" class="form-control" id="authorName" />
                    <ValidationMessage For="() => AuthorName" />
                </div>
            </div>

            <h3>Price</h3>
            <div class="price-info">
                <div class="create-course-div">
                    <label for="price">Price</label>
                    <InputNumber id="price" @bind-Value="Input.Prices!.Price" class="form-control" />
                    <ValidationMessage For="() => Input.Prices.Price" />
                </div>
                <div class="create-course-div">
                    <label for="discount-price">Discounted Price</label>
                    <InputNumber id="discount-price" @bind-Value="Input.Prices!.DiscountedPrice" class="form-control" />
                    <ValidationMessage For="() => Input.Prices.DiscountedPrice" />
                </div>
                <div class="create-course-div">
                    <label for="currency">Currency</label>
                    <InputText id="currency" @bind-Value="Input.Prices!.Currency" class="form-control" />
                    <ValidationMessage For="() => Input.Prices.Currency" />
                </div>
            </div>

            <h3>Content</h3>
            <div class="content-info">
                <div class="create-course-div">
                    <label for="contentDescription">Description</label>
                    <InputText id="contentDescription" @bind-Value="Input.Content.Description" class="form-control" />
                    <ValidationMessage For="() => Input.Content.Description" />
                </div>

                <div class="create-course-div">
                    <label for="contentIncludes">Includes <span class="content-includes-seperation">(if more than one include use , to separate)</span></label>
                    <InputText @bind-Value="ContentIncludes" class="form-control" id="contentIncludes" />
                    <ValidationMessage For="() => ContentIncludes" />
                </div>

                @foreach (var details in Input.Content.ProgramDetails)
                {
                    <div class="create-course-div">
                        <label for="programDetailsTitle">Program Details Title</label>
                        <InputText @bind-Value="details.Title" class="form-control" id="programDetailsTitle" />
                        <ValidationMessage For="() => details.Title" />
                    </div>

                    <div class="create-course-div">
                        <label for="programDetailsDescription">Program Details Description</label>
                        <InputText @bind-Value="details.Description" class="form-control" id="programDetailsDescription" />
                        <ValidationMessage For="() => details.Description" />
                    </div>
                }

                <button type="button" class="btn-theme" @onclick="AddProgramDetail">Add Program Details</button>
            </div>
            <button class="btn-theme" type="submit">Submit</button>
        </EditForm>


        <div class="error-message">
            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <p class="alert-danger-dark">@ErrorMessage</p>
            }
        </div>
        <div class="status-message">
            @if (!string.IsNullOrEmpty(StatusMessage))
            {
                <p class="alert">@StatusMessage</p>
            }
        </div>

    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private CourseModel Input { get; set; } = new();
    private string? StatusMessage { get; set; }
    private string? ErrorMessage { get; set; }
    private string AuthorName = "";
    private string CategoryName = "";
    private string ContentIncludes = "";


    private void AddProgramDetail()
    {
        Input.Content.ProgramDetails.Add(new ProgramDetails());
    }

    private async Task CreateNewCourse()
    {
        try
        {
            Input.Authors = AuthorName.Split(",").Select(x => new Authors { AuthorName = x.Trim() }).ToList();
            Input.Categories = CategoryName.Split(',').Select(x => x.Trim()).ToArray();
            Input.Content.Includes = ContentIncludes.Split(',').Select(x => x.Trim()).ToArray();

            var mutationQuery = new GraphQLCreateCourse
                {
                    Query = @"mutation createCourse($input: CourseCreateRequestInput!) {
                          createCourse(input: $input) {
                            title
                            ingress
                            reviews
                            imageUri
                            imageHeaderUri
                            categories
                            starRating
                            likesInNumber
                            likesInPercent
                            hoursToComplete
                            isDigital
                            isBestSeller
                            authors {
                                authorName
                            }
                            prices {
                                price
                                discountedPrice
                                currency
                            }
                            content {
                                description
                                includes
                                programDetails {
                                    title
                                    description
                                }
                            }
                          }
                        }",
                    Variables = new
                    {
                        input = Input
                    }
                };

            var response = await Http.PostAsJsonAsync("https://courseprovider-fp-silicon.azurewebsites.net/api/graphql?code=YsfIYn4-vNUORavCIYDMl9D-Tw_DBOoebyijYgS_DTdZAzFu-Oos3w==", mutationQuery);
            if (response.IsSuccessStatusCode)
            {
                StatusMessage = "Course created successfully!";
            }
            else
            {
                ErrorMessage = "Course creation failed.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An error occurred: {ex.Message}";
        }
    }


    public class CourseModel
    {
        public string Title { get; set; } = string.Empty;
        public string Ingress { get; set; } = string.Empty;
        public string Reviews { get; set; } = string.Empty;
        public string ImageUri { get; set; } = string.Empty;
        public string ImageHeaderUri { get; set; } = string.Empty;
        public string[] Categories { get; set; } = Array.Empty<string>();
        public int StarRating { get; set; }
        public int LikesInNumber { get; set; }
        public int LikesInPercent { get; set; }
        public int HoursToComplete { get; set; }
        public bool IsDigital { get; set; }
        public bool IsBestSeller { get; set; }
        public List<Authors> Authors { get; set; } = new();
        public Prices Prices { get; set; } = new();
        public Content Content { get; set; } = new();
    }

    public class Authors
    {
        public string AuthorName { get; set; } = string.Empty;
    }

    public class Prices
    {
        public double Price { get; set; }
        public double DiscountedPrice { get; set; }
        public string Currency { get; set; } = string.Empty;
    }

    public class Content
    {
        public string Description { get; set; } = string.Empty;
        public string[] Includes { get; set; } = Array.Empty<string>();
        public List<ProgramDetails> ProgramDetails { get; set; } = new();
    }

    public class ProgramDetails
    {
        public int Id { get; set; }
        public string Title { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
    }
}